"""
Django settings for orgwolf project.

#######################################################################
# Copyright 2012 Mark Wolfman
#
# This file is part of OrgWolf.
#
# OrgWolf is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#######################################################################

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: don't run with debug turned on in production!
if os.environ.get('ORGWOLF_DEBUG', True) in ('False', 'false', False):
    DEBUG = False
else:
    DEBUG = True

INTERNAL_IPS = ['127.0.0.1', 'localhost']

# SECURITY WARNING: keep the secret key used in production secret!
# Make this long and unique, and don't share it with anybody.
# This should be set in local_settings.py for deployment
if DEBUG:
    SECRET_KEY = '(uo8+av7_)vmmd9hb^nd4(=3&amp;qh97!zn+vffxa@8pd+jti!slq'
else:
    try:
        SECRET_KEY = os.environ['ORGWOLF_SECRET_KEY']
    except KeyError:
        raise ImproperlyConfigured("Set environment variable ``ORGWOLF_SECRET_KEY`` "
                                   "to a random string.")


LOCAL_NET = False
ENABLE_CSS = True
ENABLE_JS = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'orgwolf.com', 'www.orgwolf.com']

AUTH_USER_MODEL = 'orgwolf.OrgWolfUser'

# Application definition
INSTALLED_APPS = [
    'gtd.apps.GTDConfig',
    'orgwolf.apps.OrgwolfConfig',
    'wolfmail.apps.WolfmailConfig',
    'plugins.apps.PluginsConfig',
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'mptt',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'orgwolf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'debug': DEBUG,
        },
    },
]

WSGI_APPLICATION = 'orgwolf.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
db_engine = os.environ.get('ORGWOLF_DB_ENGINE', 'django.db.backends.sqlite3')
db_name = os.environ.get('ORGWOLF_DB_NAME', os.path.join(BASE_DIR, 'orgwolf-dev.db'))
db_user = os.environ.get('ORGWOLF_DB_USER', '')
db_password = os.environ.get('ORGWOLF_DB_PASSWORD', '')
db_host = os.environ.get('ORGWOLF_DB_HOST', '')
db_port = os.environ.get('ORGWOLF_DB_PORT', '')
db_conn_max_age = os.environ.get('ORGWOLF_DB_CONN_MAX_AGE', '0')

DATABASES = {
    'default': {
        'ENGINE': db_engine,
        'NAME': db_name,
        'USER': db_user,
        'PASSWORD': db_password,
        'HOST': db_host,
        'PORT': db_port,
        'CONN_MAX_AGE': int(db_conn_max_age),
        'OPTIONS': {}
    },
}
# MYSQL may require special isolation level depending on its setup
if db_engine == 'django.db.backends.mysql':
    DATABASES['default']['OPTIONS']['isolation_level'] = 'repeatable read'

TEST_RUNNER = 'django.test.runner.DiscoverRunner'

# Enforce HTTPS
if not DEBUG:
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = False

_log_file = os.environ.get('ORGWOLF_LOGFILE', None)
if _log_file is not None:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'filters': {
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse'
                },
            },
        'handlers': {
            'file': {
                'level': 'DEBUG',
                'class': 'logging.handlers.RotatingFileHandler',
                'maxBytes': 1024*1024*5, # 5 MB
                'backupCount': 5,
                'filename': _log_file,
                },
            },
        'loggers': {
            '': {
                'handlers': ['file'],
                'level': 'INFO',
                'propagate': True,
                },
            },
        }

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
STATIC_URL = '/static/'
_static_root = os.environ.get('ORGWOLF_STATIC_ROOT', None)
if _static_root is not None:
    STATIC_ROOT = _static_root
